88_HTTPS_SSL


============================================================================================================
==> ms1, ms2, ms3, ms4:
server:
  port: 8443
  ssl:
    enabled: true
    key-store-type: PKCS12
    key-store: classpath: ms2.p12
    key-store-password: jihed123
    key-alias: ms2
======openssl==============
** create san.cnf with:
[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no

[req_distinguished_name]
CN = localhost

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = localhost
IP.1 = 127.0.0.1

# Generate a private key and certificate with SAN
openssl req -x509 -newkey rsa:2048 -sha256 -nodes -days 365 -keyout ms2.key -out ms2.crt -config san.cnf

# Convert to PKCS12 keystore for Spring Boot
openssl pkcs12 -export -in ms2.crt -inkey ms2.key -name ms2 -out ms2.p12 -passout pass:changeit
======keytool==============
keytool -genkeypair -alias ms2 -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore ms2.p12 -validity 365 -dname "CN=localhost" -ext "SAN=DNS:localhost,IP:127.0.0.1" -storepass jihed123
====================
keytool -list -v -keystore ms2.p12 -storetype PKCS12 -storepass jihed123 | grep -A 2 "SubjectAlternativeName"
SubjectAlternativeName [
  DNSName: localhost
  IPAddress: 127.0.0.1
============================================================================================================
==> gr-https-ssl-ms0-orchestrator

keytool -exportcert -keystore ms2.p12 -storetype PKCS12 -storepass jihed123 -alias ms2 -file ms2.crt
keytool -importcert -file ms2.crt -keystore ms1-truststore.jks -alias ms2 -storepass jihed1234 -noprompt

